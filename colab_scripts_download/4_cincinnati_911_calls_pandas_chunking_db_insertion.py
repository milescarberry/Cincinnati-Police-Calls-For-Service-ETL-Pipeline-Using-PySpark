# -*- coding: utf-8 -*-
"""4_cincinnati_911_calls_pandas_chunking.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yz4ahIkcLXFlB61XJJvB3y-JFqpP0_mZ
"""

from google.colab import drive

# Mounting Google Drive

drive.mount('/content/drive')

!pip install pymongo --quiet

import numpy as np

import pandas as pd

import matplotlib.pyplot as plt

import seaborn as sns

sns.set_context('paper', font_scale = 1.4)

from plotly import express as exp, graph_objects as go, io as pio

pio.templates.default = 'ggplot2'

from plotly.subplots import make_subplots

import pickle

import datetime as dt

import requests

from time import sleep

from google.colab import userdata

from pprint import pprint

import os

import json

import pymongo

import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)

warnings.filterwarnings("ignore", category=FutureWarning)

dataset_link = "/content/drive/MyDrive/Projects/cin_crime_data_2019_2024/data/cin_crime_data.parquet"

df = pd.read_parquet(dataset_link)

timedelta_cols = [i for i in df.columns if 'timedelta' in i.lower()]

categorical_cols = [i for i in df.columns if i not in timedelta_cols and i.lower().strip() != 'num_incidents']

length = len(df)

indices = [i for i in range(0,length,50000) if i < length]

tuples = []

for i in range(len(indices)):

  if i != len(indices) - 1:

    tuples.append((indices[i], indices[i+1]))


  else:

    tuples.append((indices[i],))



df_dict = {}


cat_col_vals_dict = {k: v for k, v in zip(categorical_cols, [[] for i in categorical_cols])}



for i in range(len(tuples)):


  if i != len(tuples) - 1:


    _ = df.iloc[tuples[i][0]:tuples[i][1]:1, ::1].reset_index(drop = True)



    # _.create_time_incident_year_month = _.create_time_incident_year_month.apply(

    #     lambda x: dt.datetime.strptime(x, "%Y-%m")

    #     )


    for j in categorical_cols:


      cat_col_vals_dict[j].extend(list(_[j].unique()))



    df_dict[f"chunk_{i}"] = _


  else:


    _ = df.iloc[tuples[i][0]::1, ::1].reset_index(drop = True)



    # _.create_time_incident_year_month = _.create_time_incident_year_month.apply(

    #     lambda x: dt.datetime.strptime(x, "%Y-%m")

    #     )




    for j in categorical_cols:


      cat_col_vals_dict[j].extend(list(_[j].unique()))



    df_dict[f"chunk_{i}"] = _




for i in categorical_cols:


  cat_col_vals_dict[i] = list(set(cat_col_vals_dict[i]))


  _dict = {k: v for k, v in zip([j for j in range(len(cat_col_vals_dict[i]))], cat_col_vals_dict[i])}


  __ = pd.DataFrame()


  __['id'] = list(_dict.keys())


  __[i] = list(_dict.values())


  cat_col_vals_dict[i] = __

def open_connection():


  connection_string = userdata.get('mongodb_url')


  client = None



  try:


    client = pymongo.MongoClient(connection_string)

    client.admin.command('ping')

    print("Pinged your deployment. You successfully connected to MongoDB!")



  except BaseException as e:

    print(e)

    client = None


  return client





def db_insert(data, dbname, collname):


  counter = 0


  while True:


    try:

      client = open_connection()


      if client:


        db = client[dbname]


        coll = db[collname]


        if collname in db.list_collection_names():

          c = db[collname]

          if c == None:

            c.drop()


        print("\nPreparing to insert data.\n")


        # Write data to collection


        if len(data) > 1:

          coll.insert_many(data.to_dict(orient = 'records'))


        elif len(data) == 1:


          coll.insert_one(data.to_dict(orient = 'records'))


        else:

          pass



        break        # Break out of the while loop




      else:


        if counter > 5:

          break


        else:

          print("Will retry after 1 minutes.")

          sleep(60)

          counter += 1

          continue


    except BaseException as e:


      print(e)


      if counter > 5:

        break

      else:

        sleep(60)

        print("Will retry after 1 minutes.")

        counter += 1

        continue




def db_insert_mappings(data, dbname, collname):


  counter = 0


  while True:


    try:

      client = open_connection()


      if client:


        db = client[dbname]


        coll = db[collname]


        if collname in db.list_collection_names():

          c = db[collname]

          if c == None:

            c.drop()


        print("\nPreparing to insert data.\n")


        # Write data to collection


        coll.insert_one(data)


        # if len(data) > 1:

        #   coll.insert_many(data.to_dict(orient = 'records'))


        # elif len(data) == 1:


        #   coll.insert_one(data.to_dict(orient = 'records'))


        # else:

        #   pass



        break        # Break out of the while loop




      else:


        if counter > 5:

          break


        else:

          print("Will retry after 1 minutes.")

          sleep(60)

          counter += 1

          continue


    except BaseException as e:


      print(e)


      if counter > 5:

        break

      else:

        sleep(60)

        print("Will retry after 1 minutes.")

        counter += 1

        continue



# def insert_mappings(dbname):


#   collnames = list(distinct_cats.keys())

#   datasets = list(distinct_cats.values())


#   for i in range(len(collnames)):


#     db_insert(data = datasets[i], dbname = dbname, collname = collnames[i])



def db_get(dbname, collname):

  counter = 0

  while True:

    try:

      client = open_connection()

      if client:

        db = client[dbname]

        coll = db[collname]


        if coll.count_documents({}) > 0:


          return coll.find({}, projection = {"_id": False})


      else:

        if counter > 5:

          break


        else:

          print("Retrying after 1 minutes.")

          sleep(60)

          counter += 1

          continue


    except BaseException as e:


      print(e)

      if counter > 5:

        break


      else:

        print("Retrying after 1 minutes.")

        sleep(60)

        counter += 1

        continue




def drop_collections(dbname):


  counter = 0


  while True:


    mclient = open_connection()


    try:

      if mclient:

        db = mclient[dbname]

        for c in db.list_collection_names():

          coll = db[c]

          if coll == None:

            coll.drop()


        print("Dropped all collections.")


        break


      else:

        if counter > 5:

          break

        else:

          counter += 1

          sleep(60)

          continue


    except BaseException as e:


      print(e)


      if counter > 5:

        break


      else:

        counter += 1

        sleep(60)

        continue

drop_collections(userdata.get('mongo_db_mappings_dbname'))

drop_collections(userdata.get('mongodb_dbname'))

dframes = list(df_dict.items())

for dframe in dframes:

  db_insert(dframe[1], userdata.get('mongodb_dbname'), dframe[0])


for i in categorical_cols:

  db_insert(cat_col_vals_dict[i], userdata.get('mongo_db_mappings_dbname'), i)

